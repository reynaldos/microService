service: auction-service
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    AUCTIONS_TABLE : AuctionsTable-${self:provider.stage}
    MAIL_QUEUE_URL : ${self:custom.MailQueue.url}
    AUCTIONS_BUCKET_NAME:  ${self:custom.AuctionsBucket.name}
  versionFunctions: false
  httpApi:
    cors:
      allowedOrigins: "*"
      allowedHeaders: "*"

  # sets permissions for lambda functions
  # each lambda has its own iam role
  iam:
    role:
      statements:
        # AuctionsTableIAM:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          #can  use Amazon Resource name(ARN) for specific table
          Resource: '*' 
            # !Join ['/,', ['${self:custom.AuctionsTable.arn}','index','statusAndEndDate']]
            # - ${self:custom.AuctionsTable.arn}
            # - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AcountId}:table/AuctionsTable 
        
        # MailQueue
        - Effect: Allow
          Action: sqs:SendMessage
          Resource: ${self:custom.MailQueue.arn}
        # - Effect: Allow
        #   Action: s3:PutObject
        #   Resource: ${self:custom.AuctionsBucket.arn}
        - Effect: Allow
          Action: s3:*
          Resource: '*'

# DynamoDB Table Setup
resources:
  Resources:
    AuctionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AuctionsTable-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: endingAt
            AttributeType: S 
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: statusAndEndDate
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: endingAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    AuctionsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.AuctionsBucket.name}
        LifecycleConfiguration:
          Rules:
            - Id: ExpirePictures
              Status: Enabled
              ExpirationInDays: 1
    AuctionsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AuctionsBucket
        PolicyDocument:
          Statement:
            - Sid: PublicRead
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.AuctionsBucket.name}/*
# list of lambda functions
# contains where to find handler, method, and path
functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /auction
          authorizer: ${self:custom.authorizer}

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /auctions
          authorizer: ${self:custom.authorizer}

  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: GET
          path: /auction/{id}
          authorizer: ${self:custom.authorizer}

  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/bid
          authorizer: ${self:custom.authorizer}

  uploadAuctionPicture:
    handler: src/handlers/uploadAuctionPicture.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/picture
          authorizer: ${self:custom.authorizer}

  processAuctions:
    handler: src/handlers/processAuctions.handler
    # events:
    #   - schedule: rate(1 minute)

plugins:
  - serverless-offline
  - serverless-plugin-typescript


# allow for custom values
custom:
  # authorizer: arn:aws:lambda:${AWS::Region}:${AWS::AcountId}:function:auth-service-${self:provider.stage}-auth
  authorizer: arn:aws:lambda:us-east-1:041575996350:function:auth-service-dev-auth
  serverless-offline:
      httpPort: 8080
  AuctionsTable: 
    name: 
      Ref: AuctionsTable
    arn: Fn::GetAtt [AuctionsTable, Arn]
  AuctionsBucket:
    name: auctions-bucket-kjnkjfi324-${self:provider.stage}
    arn: arn:aws:s3:::${self:custom.AuctionsBucket.name}
  MailQueue:
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
  